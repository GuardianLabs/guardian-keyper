import 'dart:async';
import 'package:flutter/services.dart';

import '/src/core/consts.dart';
import '/src/core/data/core_model.dart';
import '/src/core/ui/widgets/emoji.dart';
import '/src/core/ui/widgets/common.dart';

import '../vault_add_guardian_presenter.dart';

class GetCodePage extends StatefulWidget {
  const GetCodePage({super.key});

  @override
  State<GetCodePage> createState() => _GetCodePageState();
}

class _GetCodePageState extends State<GetCodePage> {
  late final _presenter = context.read<VaultAddGuardianPresenter>();

  Timer? _snackBarTimer;

  @override
  void dispose() {
    _snackBarTimer?.cancel();
    super.dispose();
  }

  @override
  Widget build(final BuildContext context) => Column(
        children: [
          // Header
          HeaderBar(
            captionSpans: buildTextWithId(id: _presenter.myPeerId),
            closeButton: const HeaderBarCloseButton(),
          ),
          // Body
          PageTitle(
            title: 'Add your Guardians',
            subtitleSpans: [
              TextSpan(
                style: textStyleSourceSansPro616Purple,
                text: 'Add Guardian(s) ',
              ),
              TextSpan(
                style: textStyleSourceSansPro416Purple,
                text: 'to enable yourÂ Vault and secure your Secrets.',
              ),
            ],
          ),
          Padding(
            padding: paddingH20,
            child: PrimaryButton(
              text: 'Add via a QR Code',
              onPressed: () async {
                final code = await Navigator.of(context)
                    .pushNamed<String?>(routeScanQrCode);
                _processCode(code);
              },
            ),
          ),
          Padding(
            padding: paddingAll20,
            child: FutureBuilder(
              future: Clipboard.hasStrings(),
              builder: (_, snapshot) => PrimaryButton(
                text: 'Add via a Text Code',
                onPressed: snapshot.data == true
                    ? () async {
                        final clipboardData =
                            await Clipboard.getData(Clipboard.kTextPlain);
                        var code = clipboardData?.text;
                        if (code != null) {
                          code = code.trim();
                          final whiteSpace = code.lastIndexOf('\n');
                          code = whiteSpace == -1
                              ? code
                              : code.substring(whiteSpace).trim();
                        }
                        _processCode(code);
                      }
                    : null,
              ),
            ),
          ),
        ],
      );

  void _processCode(final String? code) {
    if (code == null) return;
    final message = MessageModel.tryFromBase64(code);
    String errorText = '';

    if (message == null) {
      errorText = 'The Code is not valid!\nPlease, '
          'make sure if it was generated by Keyper';
    } else if (message.code != MessageCode.createGroup) {
      errorText = 'This operation is not supported yet.';
    }

    if (errorText.isEmpty) {
      _presenter.qrCode = message;
    } else {
      // Debounce
      if (_snackBarTimer?.isActive ?? false) return;
      _snackBarTimer = Timer(snackBarDuration, () {});
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(buildSnackBar(
          text: errorText,
          isError: true,
        ));
      }
    }
  }
}
