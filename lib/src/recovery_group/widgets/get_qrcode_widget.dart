import 'dart:async';
import 'package:flutter/services.dart';
import 'package:mobile_scanner/mobile_scanner.dart';

import '/src/core/theme/theme.dart';
import '/src/core/widgets/common.dart';
import '/src/core/model/core_model.dart';
import '/src/core/di_container.dart';

class GetQRCodeWidget extends StatefulWidget {
  final void Function(MessageModel qrCode) resultCallback;

  const GetQRCodeWidget({super.key, required this.resultCallback});

  @override
  State<GetQRCodeWidget> createState() => _GetQRCodeWidgetState();
}

class _GetQRCodeWidgetState extends State<GetQRCodeWidget> {
  late Duration _snackBarDuration;
  late PeerId _myPeerId;
  var _scanAreaSize = 0.0;
  var _canPaste = false;
  Timer? _snackBarTimer;

  @override
  void initState() {
    super.initState();
    final diContainer = context.read<DIContainer>();
    _snackBarDuration = diContainer.globals.snackBarDuration;
    _myPeerId = diContainer.myPeerId;

    Future.microtask(() async {
      if (await Clipboard.hasStrings()) setState(() => _canPaste = true);
    });
  }

  @override
  void didChangeDependencies() {
    _scanAreaSize = MediaQuery.of(context).size.width * 0.66;
    super.didChangeDependencies();
  }

  @override
  void dispose() {
    _snackBarTimer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) => Column(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          // Header
          const HeaderBar(
            caption: 'Scan the QR Code',
            closeButton: HeaderBarCloseButton(),
          ),
          // Body
          Center(
            child: SizedBox.square(
              dimension: _scanAreaSize,
              child: MobileScanner(onDetect: _onDetectCode),
            ),
          ),
          Container(
            padding: paddingAll20,
            width: double.infinity,
            child: ElevatedButton(
              onPressed: _canPaste ? _onPasteCode : null,
              child: Text(
                'Paste from Clipboard',
                style: textStylePoppins616,
              ),
            ),
          ),
        ],
      );

  void _onDetectCode(Barcode barcode, MobileScannerArguments? args) {
    if (barcode.rawValue != null) _processCode(barcode.rawValue!);
  }

  Future<void> _onPasteCode() async {
    var code = (await Clipboard.getData(Clipboard.kTextPlain))?.text;

    if (code != null) {
      code = code.trim();
      final whiteSpace = code.lastIndexOf('\n');
      code = whiteSpace == -1 ? code : code.substring(whiteSpace).trim();
      _processCode(code);
    }
  }

  void _processCode(String code) {
    SnackBar? errorSnackBar;
    final qrCode = MessageModel.tryFromBase64(code);

    if (qrCode == null) {
      errorSnackBar = buildSnackBar(
        text: 'The Code is not valid!\n'
            'Please, make sure if it was generated by Keyper',
        isError: true,
      );
    } else if (qrCode.peerId == _myPeerId) {
      errorSnackBar = buildSnackBar(
        text: qrCode.code == MessageCode.takeGroup
            ? 'Transferring ownership to a guardian device is not supported yet.'
            : 'This operation is not supported yet.',
        isError: true,
      );
    }

    if (errorSnackBar == null) {
      widget.resultCallback(qrCode!);
    } else {
      // Debounce
      if (_snackBarTimer?.isActive ?? false) return;
      _snackBarTimer = Timer(_snackBarDuration, () {});
      if (mounted) ScaffoldMessenger.of(context).showSnackBar(errorSnackBar);
    }
  }
}
