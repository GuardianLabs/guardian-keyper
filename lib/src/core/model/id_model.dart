part of 'core_model.dart';

abstract class IdBase extends Serializable {
  final Uint8List token;

  const IdBase({required this.token});

  @override
  List<Object> get props => [token];

  @override
  bool get isEmpty => token.isEmpty;

  @override
  bool get isNotEmpty => token.isNotEmpty;

  int get length => token.length;

  int get tokenByteHash => token.fold(0, (v, e) => v ^ e);

  String get asKey => base64UrlEncode(token);

  String get asHex {
    final buffer = StringBuffer();
    for (final byte in token) {
      buffer.write(byte.toRadixString(16).padLeft(2, '0'));
    }
    return buffer.toString();
  }

  @override
  Uint8List toBytes() => token;

  String toHexShort([int count = 12]) {
    final s = asHex;
    return s.length > count * 2
        ? '0x${s.substring(0, count)}...${s.substring(s.length - count)}'
        : '0x$s';
  }
}

abstract class IdWithNameBase extends IdBase {
  final String name;

  const IdWithNameBase({required super.token, required this.name});

  String get emoji;
}

class PeerId extends IdWithNameBase {
  static const currentVersion = 1;
  static const size = 64;

  @override
  String get emoji => String.fromCharCode(emojiPeer[tokenByteHash]);

  const PeerId._({required super.token, required super.name});

  factory PeerId({Uint8List? token, String name = ''}) {
    if (token == null || token.isEmpty || token.length == 64) {
      return PeerId._(token: token ?? Uint8List(0), name: name);
    }
    throw const FormatException();
  }

  factory PeerId.fromBytes(List<int> token) {
    final u = Unpacker(token is Uint8List ? token : Uint8List.fromList(token));
    final version = u.unpackInt()!;
    if (version != currentVersion) throw const FormatException();
    return PeerId(
      token: Uint8List.fromList(u.unpackBinary()),
      name: u.unpackString()!,
    );
  }

  @override
  Uint8List toBytes() {
    final p = Packer()
      ..packInt(currentVersion)
      ..packBinary(token)
      ..packString(name);
    return p.takeBytes();
  }

  PeerId copyWith({String? name}) =>
      PeerId(token: token, name: name ?? this.name);
}

class GroupId extends IdWithNameBase {
  static const currentVersion = 1;
  static const size = 8;

  @override
  String get emoji => String.fromCharCode(emojiVault[tokenByteHash]);

  GroupId({Uint8List? token, super.name = ''})
      : super(token: token ?? getRandomBytes(size));

  factory GroupId.fromBytes(List<int> token) {
    final u = Unpacker(token is Uint8List ? token : Uint8List.fromList(token));
    final version = u.unpackInt()!;
    if (version != currentVersion) throw const FormatException();
    return GroupId(
      token: Uint8List.fromList(u.unpackBinary()),
      name: u.unpackString()!,
    );
  }

  @override
  Uint8List toBytes() {
    final p = Packer()
      ..packInt(currentVersion)
      ..packBinary(token)
      ..packString(name);
    return p.takeBytes();
  }

  GroupId copyWith({String? name}) => GroupId(
        token: token,
        name: name ?? this.name,
      );
}

class SecretId extends IdWithNameBase {
  static const currentVersion = 1;
  static const size = 8;

  @override
  String get emoji => String.fromCharCode(emojiSecret[tokenByteHash]);

  SecretId({Uint8List? token, required super.name})
      : super(token: token ?? getRandomBytes(size));

  factory SecretId.fromBytes(List<int> token) {
    final u = Unpacker(token is Uint8List ? token : Uint8List.fromList(token));
    final version = u.unpackInt()!;
    if (version != currentVersion) throw const FormatException();
    return SecretId(
      token: Uint8List.fromList(u.unpackBinary()),
      name: u.unpackString()!,
    );
  }

  @override
  Uint8List toBytes() {
    final p = Packer()
      ..packInt(currentVersion)
      ..packBinary(token)
      ..packString(name);
    return p.takeBytes();
  }

  SecretId copyWith({String? name}) => SecretId(
        token: token,
        name: name ?? this.name,
      );
}

class MessageId extends IdBase {
  static const currentVersion = 1;
  static const size = 16;

  MessageId({Uint8List? token}) : super(token: token ?? getRandomBytes(size));

  factory MessageId.fromBytes(List<int> token) {
    final u = Unpacker(token is Uint8List ? token : Uint8List.fromList(token));
    final version = u.unpackInt()!;
    if (version != currentVersion) throw const FormatException();
    return MessageId(token: Uint8List.fromList(u.unpackBinary()));
  }

  @override
  Uint8List toBytes() {
    final p = Packer()
      ..packInt(currentVersion)
      ..packBinary(token);
    return p.takeBytes();
  }
}

const emojiSecret = [
  0x1f4d2,
  0x1f4d3,
  0x1f4d4,
  0x1f4d5,
  0x1f4d6,
  0x1f4d7,
  0x1f4d8,
  0x1f4d9,
  0x1f4da,
  0x1f4db,
  0x1f4dc,
  0x1f4dd,
  0x1f4de,
  0x1f4df,
  0x1f4e0,
  0x1f4e1,
  0x1f4e2,
  0x1f4e3,
  0x1f4e4,
  0x1f4e5,
  0x1f4e6,
  0x1f4e7,
  0x1f4e8,
  0x1f4e9,
  0x1f4ea,
  0x1f4eb,
  0x1f4ec,
  0x1f4ed,
  0x1f4ee,
  0x1f4ef,
  0x1f4f0,
  0x1f4f1,
  0x1f4f2,
  0x1f4f3,
  0x1f9ed,
  0x1f4f5,
  0x1f4f6,
  0x1f4f7,
  0x1f4f8,
  0x1f4f9,
  0x1f4fa,
  0x1f4fb,
  0x1f4fc,
  0x1f9ee,
  0x1f4ff,
  0x1f9ef,
  0x1f9f0,
  0x1f9f1,
  0x1f9f2,
  0x1f9f3,
  0x1f505,
  0x1f506,
  0x1f507,
  0x1f508,
  0x1f509,
  0x1f50a,
  0x1f50b,
  0x1f50c,
  0x1f50d,
  0x1f50e,
  0x1f50f,
  0x1f510,
  0x1f511,
  0x1f512,
  0x1f513,
  0x1f514,
  0x1f515,
  0x1f516,
  0x1f517,
  0x1f518,
  0x1f9f4,
  0x1f9f5,
  0x1f9f6,
  0x1f9f7,
  0x1f9f8,
  0x1f9f9,
  0x1f9fa,
  0x1f9fb,
  0x1f9fc,
  0x1f9fd,
  0x1f9fe,
  0x1f9ff,
  0x1f525,
  0x1f526,
  0x1f527,
  0x1f528,
  0x1f529,
  0x1f52a,
  0x1f52b,
  0x1f52c,
  0x1f52d,
  0x1f52e,
  0x1f52f,
  0x1f530,
  0x1f531,
  0x1f532,
  0x1f533,
  0x1fa70,
  0x1fa71,
  0x1fa72,
  0x1fa73,
  0x1fa74,
  0x1fa78,
  0x1fa79,
  0x1fa7a,
  0x1fa7b,
  0x1fa7c,
  0x1fa80,
  0x1fa81,
  0x1f54b,
  0x1f54c,
  0x1f54d,
  0x1f54e,
  0x1fa82,
  0x1fa83,
  0x1fa84,
  0x1fa85,
  0x1fa86,
  0x1fa90,
  0x1fa91,
  0x1fa92,
  0x1fa93,
  0x1fa94,
  0x1fa95,
  0x1fa96,
  0x1fa97,
  0x1fa98,
  0x1fa99,
  0x1fa9a,
  0x1fa9b,
  0x1fa9c,
  0x1fa9d,
  0x1fa9e,
  0x1fa9f,
  0x1faa0,
  0x1faa1,
  0x1faa2,
  0x1faa3,
  0x1faa4,
  0x1faa5,
  0x1faa6,
  0x1faa7,
  0x1faa8,
  0x1faa9,
  0x1faaa,
  0x1faab,
  0x1f57a,
  0x1faac,
  0x1fab0,
  0x1fab1,
  0x1fab2,
  0x1fab3,
  0x1fab4,
  0x1f595,
  0x1f596,
  0x1f5a4,
  0x1fab5,
  0x1fab6,
  0x1fab7,
  0x1fab8,
  0x1fab9,
  0x1faba,
  0x1fac0,
  0x1fac1,
  0x1fac2,
  0x1fac3,
  0x1fac4,
  0x1fac5,
  0x1fad0,
  0x1fad1,
  0x1fad2,
  0x1fad3,
  0x1fad4,
  0x1fad5,
  0x1fad6,
  0x1fad7,
  0x1f5fb,
  0x1f5fc,
  0x1f5fd,
  0x1f5fe,
  0x1f5ff,
  0x1f600,
  0x1f601,
  0x1f602,
  0x1f603,
  0x1f604,
  0x1f605,
  0x1f606,
  0x1f607,
  0x1f608,
  0x1f609,
  0x1f60a,
  0x1f60b,
  0x1f60c,
  0x1f60d,
  0x1f60e,
  0x1f60f,
  0x1f610,
  0x1f611,
  0x1f612,
  0x1f613,
  0x1f614,
  0x1f615,
  0x1f616,
  0x1f617,
  0x1f618,
  0x1f619,
  0x1f61a,
  0x1f61b,
  0x1f61c,
  0x1f61d,
  0x1f61e,
  0x1f61f,
  0x1f620,
  0x1f621,
  0x1f622,
  0x1f623,
  0x1f624,
  0x1f625,
  0x1f626,
  0x1f627,
  0x1f628,
  0x1f629,
  0x1f62a,
  0x1f62b,
  0x1f62c,
  0x1f62d,
  0x1f62e,
  0x1f62f,
  0x1f630,
  0x1f631,
  0x1f632,
  0x1f633,
  0x1f634,
  0x1f635,
  0x1f636,
  0x1f637,
  0x1f638,
  0x1f639,
  0x1f63a,
  0x1f63b,
  0x1f63c,
  0x1f63d,
  0x1f63e,
  0x1f63f,
  0x1f640,
  0x1f641,
  0x1f642,
  0x1f643,
  0x1f644,
  0x1f645,
  0x1f646,
  0x1f647,
  0x1f648,
  0x1f649,
  0x1f64a,
];

const emojiVault = [
  0x1f64c,
  0x1f64d,
  0x1f64e,
  0x1f64f,
  0x1f680,
  0x1f681,
  0x1f682,
  0x1f683,
  0x1f684,
  0x1f685,
  0x1f686,
  0x1f687,
  0x1f688,
  0x1f689,
  0x1f68a,
  0x1f68b,
  0x1f68c,
  0x1f68d,
  0x1f68e,
  0x1f68f,
  0x1f690,
  0x1f691,
  0x1f692,
  0x1f693,
  0x1f694,
  0x1f695,
  0x1f696,
  0x1f697,
  0x1f698,
  0x1f699,
  0x1f69a,
  0x1f69b,
  0x1f69c,
  0x1f69d,
  0x1f69e,
  0x1f69f,
  0x1f6a0,
  0x1f6a1,
  0x1f6a2,
  0x1f6a3,
  0x1f6a4,
  0x1f6a5,
  0x1f6a6,
  0x1f6a7,
  0x1f6a8,
  0x1f6a9,
  0x1f6aa,
  0x1f6ab,
  0x1f6ac,
  0x1f6ad,
  0x1f6ae,
  0x1f6af,
  0x1f6b0,
  0x1f6b1,
  0x1f6b2,
  0x1f6b3,
  0x1f6b4,
  0x1f6b5,
  0x1f6b6,
  0x1f6b7,
  0x1f6b8,
  0x1f6b9,
  0x1f6ba,
  0x1f6bb,
  0x1f6bc,
  0x1f6bd,
  0x1f6be,
  0x1f6bf,
  0x1f6c0,
  0x1f6c1,
  0x1f6c2,
  0x1f6c3,
  0x1f6c4,
  0x1f6c5,
  0x1fad8,
  0x1f6cc,
  0x1fad9,
  0x1fae0,
  0x1fae1,
  0x1f6d0,
  0x1f6d1,
  0x1f6d2,
  0x1fae2,
  0x1fae3,
  0x1fae4,
  0x1fae5,
  0x1fae6,
  0x1fae7,
  0x1faf0,
  0x1f6eb,
  0x1f6ec,
  0x1faf1,
  0x1faf2,
  0x1f6f4,
  0x1f6f5,
  0x1f6f6,
  0x1f6f7,
  0x1f6f8,
  0x1f6f9,
  0x1f910,
  0x1f911,
  0x1f912,
  0x1f913,
  0x1f914,
  0x1f915,
  0x1f916,
  0x1f917,
  0x1f918,
  0x1f919,
  0x1f91a,
  0x1f91b,
  0x1f91c,
  0x1f91d,
  0x1f91e,
  0x1f91f,
  0x1f920,
  0x1f921,
  0x1f922,
  0x1f923,
  0x1f924,
  0x1f925,
  0x1f926,
  0x1f927,
  0x1f928,
  0x1f929,
  0x1f92a,
  0x1f92b,
  0x1f92c,
  0x1f92d,
  0x1f92e,
  0x1f92f,
  0x1f930,
  0x1f931,
  0x1f932,
  0x1f933,
  0x1f934,
  0x1f935,
  0x1f936,
  0x1f937,
  0x1f938,
  0x1f939,
  0x1f93a,
  0x1f93c,
  0x1f93d,
  0x1f93e,
  0x1f940,
  0x1f941,
  0x1f942,
  0x1f943,
  0x1f944,
  0x1f945,
  0x1f947,
  0x1f948,
  0x1f949,
  0x1f94a,
  0x1f94b,
  0x1f94c,
  0x1f94d,
  0x1f94e,
  0x1f94f,
  0x1f950,
  0x1f951,
  0x1f952,
  0x1f953,
  0x1f954,
  0x1f955,
  0x1f956,
  0x1f957,
  0x1f958,
  0x1f959,
  0x1f95a,
  0x1f95b,
  0x1f95c,
  0x1f95d,
  0x1f95e,
  0x1f95f,
  0x1f960,
  0x1f961,
  0x1f962,
  0x1f963,
  0x1f964,
  0x1f965,
  0x1f966,
  0x1f967,
  0x1f968,
  0x1f969,
  0x1f96a,
  0x1f96b,
  0x1f96c,
  0x1f96d,
  0x1f96e,
  0x1f96f,
  0x1f970,
  0x1f973,
  0x1f974,
  0x1f975,
  0x1f976,
  0x1f97a,
  0x1f97c,
  0x1f97d,
  0x1f97e,
  0x1f97f,
  0x1f980,
  0x1f981,
  0x1f982,
  0x1f983,
  0x1f984,
  0x1f985,
  0x1f986,
  0x1f987,
  0x1f988,
  0x1f989,
  0x1f98a,
  0x1f98b,
  0x1f98c,
  0x1f98d,
  0x1f98e,
  0x1f98f,
  0x1f990,
  0x1f991,
  0x1f992,
  0x1f993,
  0x1f994,
  0x1f995,
  0x1f996,
  0x1f997,
  0x1f998,
  0x1f999,
  0x1f99a,
  0x1f99b,
  0x1f99c,
  0x1f99d,
  0x1f99e,
  0x1f99f,
  0x1f9a0,
  0x1f9a1,
  0x1f9a2,
  0x1faf3,
  0x1faf4,
  0x1faf5,
  0x1faf6,
  0x1f9b4,
  0x1f9b5,
  0x1f9b6,
  0x1f9b7,
  0x1f9b8,
  0x1f9b9,
  0x1f9c0,
  0x1f9c1,
  0x1f9c2,
  0x1f9d0,
  0x1f9d1,
  0x1f9d2,
  0x1f9d3,
  0x1f9d4,
  0x1f9d5,
];

const emojiPeer = [
  0x1f9cb,
  0x1f3cf,
  0x1f3d0,
  0x1f3d1,
  0x1f3d2,
  0x1f3d3,
  0x1f9cc,
  0x1f9cd,
  0x1f9ce,
  0x1f9cf,
  0x1f9d6,
  0x1f9d7,
  0x1f9d8,
  0x1f9d9,
  0x1f9da,
  0x1f9db,
  0x1f9dc,
  0x1f9dd,
  0x1f3e0,
  0x1f3e1,
  0x1f3e2,
  0x1f3e3,
  0x1f3e4,
  0x1f3e5,
  0x1f3e6,
  0x1f9de,
  0x1f3e8,
  0x1f3e9,
  0x1f3ea,
  0x1f3eb,
  0x1f3ec,
  0x1f3ed,
  0x1f3ee,
  0x1f3ef,
  0x1f3f0,
  0x1f9df,
  0x1f3f4,
  0x1f9e0,
  0x1f9e2,
  0x1f3f8,
  0x1f3f9,
  0x1f3fa,
  0x1f9e3,
  0x1f9e4,
  0x1f9e5,
  0x1f9e6,
  0x1f9e7,
  0x1f400,
  0x1f401,
  0x1f402,
  0x1f403,
  0x1f404,
  0x1f405,
  0x1f406,
  0x1f407,
  0x1f408,
  0x1f409,
  0x1f40a,
  0x1f40b,
  0x1f40c,
  0x1f40d,
  0x1f40e,
  0x1f40f,
  0x1f410,
  0x1f411,
  0x1f412,
  0x1f413,
  0x1f414,
  0x1f415,
  0x1f416,
  0x1f417,
  0x1f418,
  0x1f419,
  0x1f41a,
  0x1f41b,
  0x1f41c,
  0x1f41d,
  0x1f41e,
  0x1f41f,
  0x1f420,
  0x1f421,
  0x1f422,
  0x1f423,
  0x1f424,
  0x1f425,
  0x1f426,
  0x1f427,
  0x1f428,
  0x1f429,
  0x1f42a,
  0x1f42b,
  0x1f42c,
  0x1f42d,
  0x1f42e,
  0x1f42f,
  0x1f430,
  0x1f431,
  0x1f432,
  0x1f433,
  0x1f434,
  0x1f435,
  0x1f436,
  0x1f437,
  0x1f438,
  0x1f439,
  0x1f43a,
  0x1f43b,
  0x1f43c,
  0x1f43d,
  0x1f43e,
  0x1f9e8,
  0x1f440,
  0x1f9e9,
  0x1f442,
  0x1f443,
  0x1f444,
  0x1f445,
  0x1f446,
  0x1f447,
  0x1f448,
  0x1f449,
  0x1f44a,
  0x1f44b,
  0x1f44c,
  0x1f44d,
  0x1f44e,
  0x1f44f,
  0x1f450,
  0x1f451,
  0x1f452,
  0x1f453,
  0x1f454,
  0x1f455,
  0x1f456,
  0x1f457,
  0x1f458,
  0x1f459,
  0x1f45a,
  0x1f45b,
  0x1f45c,
  0x1f45d,
  0x1f45e,
  0x1f45f,
  0x1f460,
  0x1f461,
  0x1f462,
  0x1f463,
  0x1f464,
  0x1f465,
  0x1f466,
  0x1f467,
  0x1f468,
  0x1f469,
  0x1f46a,
  0x1f46b,
  0x1f46c,
  0x1f46d,
  0x1f46e,
  0x1f46f,
  0x1f470,
  0x1f471,
  0x1f472,
  0x1f473,
  0x1f474,
  0x1f475,
  0x1f476,
  0x1f477,
  0x1f478,
  0x1f479,
  0x1f47a,
  0x1f47b,
  0x1f47c,
  0x1f47d,
  0x1f47e,
  0x1f47f,
  0x1f480,
  0x1f481,
  0x1f482,
  0x1f483,
  0x1f484,
  0x1f485,
  0x1f486,
  0x1f487,
  0x1f488,
  0x1f489,
  0x1f48a,
  0x1f48b,
  0x1f48c,
  0x1f48d,
  0x1f48e,
  0x1f48f,
  0x1f490,
  0x1f491,
  0x1f492,
  0x1f493,
  0x1f494,
  0x1f495,
  0x1f496,
  0x1f497,
  0x1f498,
  0x1f499,
  0x1f49a,
  0x1f49b,
  0x1f49c,
  0x1f49d,
  0x1f49e,
  0x1f49f,
  0x1f4a0,
  0x1f4a1,
  0x1f4a2,
  0x1f4a3,
  0x1f4a4,
  0x1f4a5,
  0x1f4a6,
  0x1f4a7,
  0x1f4a8,
  0x1f4a9,
  0x1f4aa,
  0x1f4ab,
  0x1f4ac,
  0x1f4ad,
  0x1f4ae,
  0x1f4af,
  0x1f4b0,
  0x1f4b1,
  0x1f4b2,
  0x1f4b3,
  0x1f4b4,
  0x1f4b5,
  0x1f4b6,
  0x1f4b7,
  0x1f4b8,
  0x1f9ea,
  0x1f4ba,
  0x1f4bb,
  0x1f4bc,
  0x1f4bd,
  0x1f4be,
  0x1f4bf,
  0x1f4c0,
  0x1f9eb,
  0x1f4c2,
  0x1f4c3,
  0x1f4c4,
  0x1f9ec,
  0x1f4c6,
  0x1f4c7,
  0x1f4c8,
  0x1f4c9,
  0x1f4ca,
  0x1f4cb,
  0x1f4cc,
  0x1f4cd,
  0x1f4ce,
  0x1f4cf,
  0x1f4d0,
];
